Day # 33
-----------
HOC
Understanding HOC Concepts, Implementing simple HOC Component.

HOC is useful for 
	cross cutting
	decorator pattern

Suppose, if you have created a withdrawal component/ deposit component/ print last 10 transaction
these components, can be accessed only if the user has already logged in
or while accessing these components, it should prompt the user to login.

So, those who create these components do not bother about before and after things to be done.
I create withdrawal component.
But someone who uses this component, has to take care - what needs to be done before and after

this is what cross cutting is all about. We discussed this during spring AOP.

now, instead of just plugging the withdrawal component into my App component,
I can decorate/ cover/ enclose this component inside a HOC

HOC is going to wrap my component while plugging it in App component.

Demo:
-------------
check hoc-demo project

Task:
----------
and create a new reactjs application
and create Login component
create couple of Hoc components and ensure 
hoc component is able to decorate the login component
in any ways
	color
	bg color
	title
or anything

check by plugging login component in the App


localStorage
sessionStorage

once a user logs in successfully, 
their jwt token must be stored in localStorage (token has a validity period)


----------------------------
Preparation for interview
Techademy has "Q & A"

Techademy learning
	Higher Order Components, Render Props, React Context API & React Router,Routing Transition


and share your observations 
if req,
	show demo
	
HOC demo project contains the code for useContext
will give demo after break.


----------------------------
What is useContext?

You know
	useState
	useEffect
	useRef

useContext hook?
	is used to pass the state to the deep nested child componenets.
	often used along with state.

Normally, 
	if component1 used component2 as a child
		then the state data of component1 must be passed to component2 in order to all component2 to use it
	
we keep on passing the values from parent to child component.
Instead of that, we can use context.
so that, the context data set in parent component can be accessed by child component

Demo:
in this example,
App component plugs
	One

One plugs 
	Two

Two plugs
	Three
Three plugs
	Four
Four plugs
	Five

Five is the child most component.

In One, 
	we set a context a value

In Five,
	we should be able to display that value

Steps:

1) we need to create a context.

ex:
	create a file	"NameContext.js"
because, i am going to pass name across component

import { createContext } from "react";
const NameContext=createContext({name:null});
export default NameContext;


2) create all the components
One to Five for example

3) plug One component in App component

4) in One.js

surround the <Two /> by

import NameContext from './NameContext';

<NameContext.Provider value="Raja">
</NameContext.Provider>

5) in Five.js
import NameContext from './NameContext';
	const name=useContext(NameContext);

display that here
	{name}

Refer to the project "use-context-demo"
