Day #5:
------------
IO
Lambda Expressions, Stream API, Functional Interfaces, Default Methods in Interfaces, Method References, Optional Class, Date and Time API (java.time package)
----------------
IO	-	Input Output

What is input?
	From a program's perspective, a program gets input.
		a program gets input
	Input is called as READ
	
What is output?
	From a program's perspective, a program gives output.
		a program gives output
	Output is called as WRITE


Input can be obtained from various SOURCEs
Ouput can be given to various TARGETs

input sources:
	Keyboard		(System.in)
	File		A program can READ input from a file, 
	Socket		A program can READ input from a socket	 (Socket is used for input/output from network)
	Buffer/ Memory	A program can READ from buffer/ memory/ clipboard


output targets:
	Monitor/ Screen	(System.out)	console
	File		A program can write output to a file
	

How do we get input from use so far?	in java
	Scanner
Scanner sc=new Scanner(System.in);	//if i specify System.in, then i get input from keyboard
				//that means, i have other options also instead of System.in

	I am going to use the same scanner, to get input from a File also


import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class App {

	public static void main(String[] args) throws FileNotFoundException {
		File f=new File("D:\\Jag\\wipro\\June2024\\all\\Java\\praveen.txt");
		Scanner sc=new Scanner(f);
		String input=sc.nextLine();
		System.out.println(input);
	}

}



If you want to work on a File, then you need to represent the file in memory as an object.
File is present in Storage
Object is present in Memory

If a program needs to read from a file (or write into the file), then the file (which is in secondary storage device) must be loaded to the memory as an object.

If you want to represent a file as an object (then there should be a class)	ie., File class of java.io package

Now, i am able to represent the file as object in memory,
	i can 
		rename the file
		read the size of the file
		get the parent location of the file
		
File object can represent a file or a folder
	if it is a folder,
		then you can get the list of file/folders


import java.io.File;

public class App2 {

	public static void main(String[] args) {
		File f=new File("D:\\Jag\\wipro\\June2024\\all\\Java");
		System.out.println(f.isDirectory());
//		String[] files = f.list();
//		for(String file:files)
//		{			
//			System.out.println(file);
//		}
		File[] files = f.listFiles();
		for(File file : files)
		{
			if(file.isDirectory())
				System.out.println(file.getName());
		}
	}

}


-----------------------------------------------------------------
explore the classes in java.io package, we can categorize them as follows:
we have 2 important operations to perform
Read
	characters
		Reader		
	bytes
		InputStream
Write
	characters
		Writer
	bytes
		OutputStream


Reader and Writer are used to read and write Characters respectively..
InputStream and OutputStream are used to read and write Bytes respectively.

Node streams refer to a specific node from which, input is read or to which output is written
Filter streams work on node streams for additional functionality

I am going to list lot of classes, one by one, you be ready to tell me what it do?
FileInputStream		read input as bytes from a file
FileWriter			write output as characters to a file
FileOutputStream		write output as bytes to a file
FileReader			read input as characters from a file
BufferedReader		read input as characters from a memory
BufferedWriter		write output as characters to a memory
BufferedInputStream		read bytes as input from a memory
BufferedOutputStream	write bytes as output to a memory
DataInputStream		data means, primitive data. 	Read primitive type input from a source
DataOutputStream		Write primitive data to a target.
ObjectInputStream		to read objects from a source
ObjectOutputStream		to write objects to a target

Before java 5 version, there was no Scanner class to get input.
So we used BufferedReader to get char inputs

BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
-------------------------------------------------------
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class App3 {

	public static void main(String[] args) throws IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		String x=br.readLine();
		System.out.println(x);
	}

}

-------------------------------
source:
C:\Users\rjaga\Pictures\paratta.jpg

target:
D:\Jag\wipro\June2024\all\Java\roti.jpg


import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class App4 {
	public static void main(String[] args) throws IOException {
		File source=new File("C:\\Users\\rjaga\\Pictures\\paratta.jpg");
		//need to read bytes from a file
		FileInputStream fis=new FileInputStream(source);
		byte []data=new byte[(int) source.length()];
		fis.read(data);
		fis.close();
		//---------------------------
		File target=new File("D:\\Jag\\wipro\\June2024\\all\\Java\\parotta.jpg");
		//write all bytes to a file
		FileOutputStream fos=new FileOutputStream(target);
		fos.write(data);
		fos.flush();
		fos.close();
		System.out.println("Done");
	}
}



the above program reads all bytes from a  file and write them to a new file.
But if the  file is huge, the file is present in secondary storage device but when loading entire content in memory,
memory is comparatively smaller.

So, we need to read 1 byte at a time and write that 1 byte to the target file.

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class App5 {
	public static void main(String[] args) throws IOException, InterruptedException {
		File source=new File("C:\\Users\\rjaga\\Pictures\\paratta.jpg");
		FileInputStream fis=new FileInputStream(source);
		File target=new File("D:\\Jag\\wipro\\June2024\\all\\Java\\raja.jpg");
		FileOutputStream fos=new FileOutputStream(target);
		int data=-1;
		while((data=fis.read())!=-1)
		{
			fos.write(data);
			fos.flush();
			Thread.sleep(100);
		}
		fos.close();
		//---------------------------
		System.out.println("Done");
	}
}


------------------------------

Note:
File f=new File("D:\\Jag\\wipro\\June2024\\all\\Java\\praveen.txt");
	the file path in above line is "Full qualified path".
	this is poor idea. When we upload project to another computer, there may not be d:
	so the file path should always be relative path
		\\files\\abcd.txt
	this is relative path. From current location, we refer, and this will work always fine.
	so avoid, full  qualifed path.

Flush method
	is used to reflect the changes in object to the secondary storage device
	if .close() method is called, close will call flush automatically
	if program ends normally, the program will close the file automatically.
	so we do not find any difference by using flush method.

	but in a GUI application where the page is displayed for long time, the program does not close
	so it wont call close method and hence it wont call flush method. in that case, your file will not be ready

	if a program opens a file, then other programs are not allowed to open the file. So close the file asap



How to write multiple data in a file
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class App6 {

	public static void main(String[] args) throws IOException {
		File f=new File("praveen.dat");
		DataOutputStream dos=new DataOutputStream(new FileOutputStream(f));
		dos.writeInt(101);
		dos.writeFloat(2.3f);
		dos.writeBoolean(true);
		dos.writeChar('A');
		
		dos.flush();
		dos.close();
		
	}

}






How to read multiple data from a file
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

public class App7 {

	public static void main(String[] args) throws IOException {
		File f=new File("praveen.dat");
		DataInputStream dis=new DataInputStream(new FileInputStream(f));
		int i=dis.readInt();
		float fl=dis.readFloat();
		boolean b=dis.readBoolean();
		char c=dis.readChar();
		
		System.out.println(i);
		System.out.println(fl);
		System.out.println(b);
		System.out.println(c);
		
	}

}


now, if the order of read is changed, then it is collapsed.

So, better in such cases, create a Class that has these data members and write objects to the file using
ObjectOutputStream



import java.io.Serializable;

public class Employee
{
	int id;
	float average;
	boolean isPermanent;
	char grade;
	@Override
	public String toString() {
		return "Employee [id=" + id + ", average=" + average + ", isPermanent=" + isPermanent + ", grade=" + grade
				+ "]";
	}
	
}



import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;

public class App8 {

	public static void main(String[] args) throws IOException {
		Employee e=new Employee();
		e.id=123;
		e.average=9.4f;
		e.isPermanent=true;
		e.grade='B';
		
		File f=new File("krishn.dat");
		ObjectOutputStream oos=new ObjectOutputStream(new FileOutputStream(f));
		oos.writeObject(e);
		oos.flush();
		oos.close();
		
	}

}


//Error:
Exception in thread "main" java.io.NotSerializableException: Employee

Employee class is not serializable so we cannot write an object of Employee to any stream.

import java.io.Serializable;

public class Employee implements Serializable
{
	int id;
	float average;
	boolean isPermanent;
	char grade;
	@Override
	public String toString() {
		return "Employee [id=" + id + ", average=" + average + ", isPermanent=" + isPermanent + ", grade=" + grade
				+ "]";
	}
	
}



Now, lets write a program to read object from the file
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;

public class App9 {

	public static void main(String[] args) throws IOException, ClassNotFoundException{
		File f=new File("krishn.dat");
		ObjectInputStream ois=new ObjectInputStream(new FileInputStream(f));
		Employee emp=(Employee) ois.readObject();
		System.out.println(emp);
	}

}

Do you remember, in our previous example, we implemented an interface 
	Serializable
		this interface do not have any abstract method

public interface Serializable {
}

	such interfaces, that do not have any abstract method are called as "Marker interfaces"




------------------
Activity:

Write program to 
	read/ write bytes
	read/ write characters
	read/ write objects
	access the file properties


Java 8 concepts
--------------------
Lambda Expressions, Stream API, Functional Interfaces, Default Methods in Interfaces, Method References, Optional Class, Date and Time API (java.time package)


interfaces upto java version 7		version 7 or earler
	those interfaces can have methods without body only.	 	(abstract methods. we do not mention abstract)
	
let us understand "interfaces" now

	see a mobile phone, there are some interfaces. example, c type pin	
	3.5 mm jack was available in many mobiles, now it is not found in many. 	ex: 	One plus mobile 

	an interface provides a support for some device.

	
in java upto 1.7 version:
	an interface can contain 
		only abstract methods	
		only constants


What is an interface?
	provides abstraction and support or compatibility among classes

	ex:
		public void display(List<Integer> list)
		{}

		you know that "List" is an interface which is implemented by the classes 
			ArrayList
			LinkedList
			Vector
			Stack

		call the above method display by passing any of the above class objects

			display(new ArrayList<>());
			display(new LinkedList<>()):
			display(new Vector<>());
			display(new Stack<>();


before java8, ie., upto java 7,
	interfaces can have method without body only.

Java 8 has given new features to interface concept:

	java 8 interfaces can have
		static methods with body
		default methods with body


in any version, 
	interface cannot contain variables.
	interface can contain CONSTANTS only

java 8 interfaces
	static method with body
	default method with body

AN INTERFACE THAT CONTAINS ONLY 1 ABSTRACT METHOD
	is called as FUNCTIONAL INTERFACE

	Ex:
		Runnable			run()
		Comparable		compareTo()
		Comparator		compare()
		Predicate			test()
	
	all these interfaces have only 1 abstract method so they are called as Functional Interfaces



For implementing functional interfaces, we do not need to create a separate class.
	we can use lambda

whenever we implement an interface that contains only 1 method, 
	we can write that method alone using lambda
		Comparator is a funtional interface, the only method is compare(a,b)

	(a,b)->a-b


----------------------------------------------------------------------
Lambda is used to provide quick implementation for functional interface

Task:
	write a program that contains a list of Integers
	use Collections.sort to sort them in descending order
	use lambda to provide the sorting order

	display the output



	(a,b)->b-a
	(a,b)->b.compareTo(a)

	compare or compareTo methods return "int"
		for integer types, we can use - symbol
		for other types?????		we can use compareTo only

Stream API
---------------
	is very similar to SELECT query in RDBMS
	if SELECT statement is used to retrieve, filter, sort, grouping (aggregation) on table(s) in database,
	stream api is used for the same in Collections in java

	Stream api will not affect the collection but it may provide the modified version of that collection

	It is named as Stream because, every operation, returns a stream (like cascading)

	Some operations in stream are called as "intermediate" operations. They return another stream only.
		ex:		filter, sorted, etc
	Some operations in stream are called as "terminal" operations. They are used to
		either collect the result (or)		.collect()
		print the result			.forEach(System.out::println);


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.function.Predicate;
import java.util.stream.Stream;

class MyPredicate implements Predicate<String>
{

	@Override
	public boolean test(String t) {
		return t.length()>4;		
	}
	
}
public class App2 {

	public static void main(String[] args) {
		List<String> countries=Arrays.asList("India","USA","Australia","Sri lanka","Bangladesh");
		
		List<String> countries1=new ArrayList<>(countries);

		countries1.add("Pakistan");
		countries1.add("South Africa");
		countries1.add("Uganda");
		countries1.add("Canada");
		countries1.add("Afghanisthan");

//		Stream<String> stream = countries1.stream();
//		Stream<String> result = stream.filter(new MyPredicate());
//		result.forEach(System.out::println);
		
		countries1.stream()
		.filter((t)->t.length()>10)
		.forEach(System.out::println);
		
	}

}


--------------------------------------------------------------------
Task:
	use stream api to filter the collection based on different condition using .filter(predicate)

	make it interesting with List<Employee> or any user defined type
	so that you can give conditions like
		.filter((t)->t.getDepartment().equals("EEE"))

---------------------------------------------------------
Method reference
-----------------------
	::
	this method reference operator is introduced in java 8

	this allows us to use any method, whose signature is matching to provide the quick implementation of functional interface.

	in lambda, we provide the logic for implementing a functional interface
	but in method reference, a method is already there, then make use of that method for funtional interface








interface Person
{
	void speak();		//this method is public
}
class Student implements Person
{
	void speak()		//mistake. this method must be public only
	{
		
	}
}
-------------------------------------
in any version of Java, the following is possible

interface Person
{
	void speak();
}
class Student implements Person
{
	public void speak()
	{
		System.out.println("Student speak");
	}
}
public class App {

	public static void main(String[] args) {
		Person raja;		//this is not an object of Person
							//it is a reference variable
							//which can be assigned any implementation of Person
		
		raja=new Student();
		raja.speak();
	}

}


-----------------------------


interface Person
{
	void speak();
	
}
class Student implements Person
{
	public void speak()
	{
		System.out.println("Student speak");
	}
}
class Teacher
{
	public void abcd()
	{
		System.out.println("Teacher speak");
	}
	
	public static void run()
	{
		System.out.println("Teacher run");
	}
}
public class App {

	public static void main(String[] args) {
		Person raja;		//this is not an object of Person
							//it is a reference variable
							//which can be assigned any implementation of Person
		
//		raja=new Student();
//		raja.speak();
//		
//		Teacher jag=new Teacher();
//		raja=jag::abcd;			//method reference (instance)
		
//		raja.speak();
		
		raja=Teacher::run;		//static method reference
		raja.speak();
	}

}
-------------------------
Task:
	Create an interface Maths		
		int sum(int i, int j);
	
	Create a class Mathematics (does not implements Maths interface)
		method:
			int add(int i, int j);			//method name is add

	in App, main method,
		use method reference to assign add method to Maths interface
		call the sum method and check


------------------------------------------------------------------------------------------------------------


public interface Maths {
	int sum(int i, int j);
}



public class Mathematics {
	int add (int i, int j)
	{
		return i+j;
	}
}




public class App2 {

	public static void main(String[] args) {
		Maths m;
		Mathematics mathematics=new Mathematics();
		m=mathematics::add;
		System.out.println(m.sum(2, 3));
	}

}


---------------------------------------------
Stream API Grouping and Aggregation

	in SELECT statement, we use GROUP BY
	to get aggregation for every group.

ex:	Display the average of salary for each department


import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.stream.Collectors;

public class App {

	public static void main(String[] args) {
		List<Employee> empList=new ArrayList<>();
		empList.add(new Employee(12,"Raja","CSE",100000));
		empList.add(new Employee(2,"Abdul","EEE",100000));
		empList.add(new Employee(11,"John","CSE",100000));
		empList.add(new Employee(10,"Siva","EEE",100000));
		empList.add(new Employee(9,"Dinesh","CSE",100000));
		empList.add(new Employee(5,"Prakash","ECE",100000));
		empList.add(new Employee(8,"Hari","ECE",100000));
		empList.add(new Employee(7,"Krishna","EEE",100000));
		empList.add(new Employee(1,"Mohammed","ECE",100000));
		empList.add(new Employee(4,"Peter","CSE",100000));
		
		//Find the average of salary spent in each department
		
		Map<String, Double> result = empList.stream()
		.collect(Collectors.groupingBy(Employee::getDepartment,Collectors.averagingInt(Employee::getSalary)));
		
		for(Entry<String, Double> entry:result.entrySet())
			System.out.println(entry);
	}

}

----------------------
Refer the above example
and try to get aggregation based on group using Stream API

University - Requirement 6
	use Stream api to solve this problem.



import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class College {
	private String name;
	private String website;
	private String mobile;
	private String founder;
	private Integer numberOfDept;
	private String location;
	private Date startingDate;
	
	public College()
	{
		//create object without values.
		//then use setter methods to set values
	}
	
	public College(String name, String website, String mobile, String founder, Integer numberOfDept, String location,
			Date startingDate) {
		//create object and fill the values while creating the object itself
		super();
		this.name = name;
		this.website = website;
		this.mobile = mobile;
		this.founder = founder;
		this.numberOfDept = numberOfDept;
		this.location = location;
		this.startingDate = startingDate;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getWebsite() {
		return website;
	}
	public void setWebsite(String website) {
		this.website = website;
	}
	public String getMobile() {
		return mobile;
	}
	public void setMobile(String mobile) {
		this.mobile = mobile;
	}
	public String getFounder() {
		return founder;
	}
	public void setFounder(String founder) {
		this.founder = founder;
	}
	public Integer getNumberOfDept() {
		return numberOfDept;
	}
	public void setNumberOfDept(Integer numberOfDept) {
		this.numberOfDept = numberOfDept;
	}
	public String getLocation() {
		return location;
	}
	public void setLocation(String location) {
		this.location = location;
	}
	public Date getStartingDate() {
		return startingDate;
	}
	public void setStartingDate(Date startingDate) {
		this.startingDate = startingDate;
	}

	@Override
	public String toString() {
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		return String.format("Name: %s\n"
				+ "Website: %s\n"
				+ "Mobile: %s\n"
				+ "Founder: %s\n"
				+ "Number of Dept: %d\n"
				+ "Location: %s\n"
				+ "Starting Date: %s\n",name, website, mobile, founder, numberOfDept, location, sdf.format(startingDate));
	}

		@Override
	public boolean equals(Object obj) {
		College arg=(College) obj;
		return this.getName().equalsIgnoreCase(arg.getName()) && this.getStartingDate().equals(arg.getStartingDate());
	}
		static Map<String,Long> calculateLocationCount(List<College> list)
		{
			Map<String, Long> result = list.stream()
			.collect(Collectors.groupingBy(College::getLocation, Collectors.counting()));
			
			return result;
		}
}



import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Scanner;

public class App {

	public static void main(String[] args) throws ParseException {
		Scanner sc=new Scanner(System.in);
		System.out.println("Enter the number of colleges:");
		int n=sc.nextInt();
		List<College> collegeList=new ArrayList<>();
		for(int i=0;i<n;i++)
		{
			String detail=sc.nextLine();
			if(detail.equals(""))
				detail=sc.nextLine();
			String[] arr1 = detail.split(",");
			College college1=new College();	//no arguments passed
			college1.setName(arr1[0]);
			college1.setWebsite(arr1[1]);
			college1.setMobile(arr1[2]);
			college1.setFounder(arr1[3]);
			college1.setNumberOfDept(Integer.parseInt(arr1[4]));
			college1.setLocation(arr1[5]);
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			college1.setStartingDate(sdf.parse(arr1[6]));
			collegeList.add(college1);
		}
		Map<String, Long> result = College.calculateLocationCount(collegeList);
		System.out.format("%-15s %s\n","Location","Count");
		for(Entry<String, Long> e:result.entrySet())
		{
			System.out.format("%-15s %s\n",e.getKey(),e.getValue());
		}
	}

}


------------------------------------------
Mock 29 Req 6
	Use Stream API to solve this.

----------------------------------------------------






