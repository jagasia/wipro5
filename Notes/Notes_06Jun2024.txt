Git
	we used git to share our project with other collaborators
	we created a github repository (remote repository)
	we created a folder in our system (local repository)
	we were able to push files and folders from local to the remote repository
	how?
		we initialized local repository
			git init
		we linked this local to remote using
			git remote add origin https://github.com/jagasia/example.git
		we added all files in current location
			git add .
		we committed the changes to local repository
			git commit -m "your message"
		we pushed the changes to remote repository
			git push orgin master
			or
			we create a branch
			git branch -M jag	
			git push -u origin jag

	-m
	-u
	-M
		you need to go through the techademy and also additonal websites to take the maximum
		list of commands and options used in git.

	git merge
	git checkout vs 	git switch
	stashing
	resolved conflict 

	git config --global user.name jagasia
---------------------------------

What is the purpose of using Git?
Which git you have used?
	github
	gitlab
	bitbucket
How do you switch between current branch to another branch
	git checkout
How do you merge your current branch with another branch
	when there are conflicts
		resolve conflict and merge
		and delete another branch
Suppose, your team of 4 members want to work on a single remote repository
	how do you allow other 3 members to push to your repository?
		make them as collaborators

------------------------------------
Core Java

"Primitive Data types, variables, Operators, String Concentrator, String Builder, String API, date, Time and numeric objects, Flow control, Conditions, Switch, Loop & branch, Arrays, 
OOPs concepts, Classes and Objects, Inheritance, Polymorphism, Abstraction, Encapsulation, Interfaces, Composition, Overloading and Overriding, 
Exception Handling, Try-Catch Blocks, types of exceptions, Throwing Exceptions & catching Multiple Exceptions, Finally block,custom exceptions, Concurrency, File I/O, "

----------------------------------
Java as a technology includes
	Java Platform
	Java language


Java Platform includes
	java compiler
		that is used to translate a java program into a byte code
	java runtime environment	
		that is used to execute / run the program


a platform usually is used to develop applications
	applications => application software


what kind of applications/ services can be developed using java?
	console applications		CUI		Character User Interface
	windows applications		GUI		Graphical User Interface
	web applications		use browser to access the applications
	web services / microservices	no frontend	datasource and business logic
	mobile applications		GUI
	
we can also create components in java which are called as "Java Beans" which can be plugged into other java applications to be able to run them.

Java introduced in 1995 by Sun Microsystems 
a team lead by James Gosling (Sun Microsystems) developed 
	initially they developed 	a language called "Oak" (it is a kind of tree)
	later they named it as		Java	(it is coffee in indonesia)


Jakarta is the capital of Indonesia

Java versions:
	1.1
	1.2
	1.3
	1.4
		major version change		happened in 5
	5		for-each loop, Arrays methods like toString, Generics. Annotations
	6
	7
		major version change		happened in 8
	8	Lambda, Stream api, Functional programming, Method reference
	9	Concurrency

	11	

	17
	21
	22
	
	six month once, you can expect a version. but there is something called LTS
	Long Term Support 
		that allows us to use a version without worrying about the new version


Lab setup:
--------------
java can be downloaded and installed (free for non commercial use)

But we use cloud lab.

Task:
-------
	Open cloud lab
	go to cmd in any location
	check java version
		java -version
		(or)
		java --version


since most of us get error loading cloud lab,
Let us use CODE LAB

A java program cannot execute without a class and main method

so, in code lab,
write the following code:

public class App
{
    public static void main(String []args)
    {
        System.out.println("Hello jag");
    }
}

click the "Compile and run" button



in the above program, we use a class.
Because in java, without a class, a program cannot be executed

then we created a method called "main"
	main is the entry point for a program to start execution.
	there can be many methods in a class, but execution starts from main

public class App
{
    static 
    {
        System.out.println("This is static block");
    }

    public static void main(String []args)
    {
        System.out.println("Hello jag");
    }
}

But in the above code, the "This is static block" comes first
before "Hello jag"

Compilation process in java:
--------------------------------------
	you know what is compilation?
		compilation is a process of 
			translating a program from high level to low level
			
high level means?
	closer to human understandable format
low level means?
	closer to machine level

Compilation in java is 
	done in 2 stages

	i) javac is used to compile "java" program into "byte" code
	ii) when we run the program using "java" command
		it further compile the "byte" code into "machine language" code


so, when we develop the project and compile in one particular platform
	example, in windows, we develop the project and compile

then we execute in a different platform,
	example, it is executed in linux,
	then the JRE which we downloaded for linux,
		will be able to translate that byte code into linux specific machine language code

So java is platform independent 
	we develop and compile java projects in any computer
	and we run it in different type of computers
		it runs because, they are further tranlsated into that platform specific JRE

Java does not run in all platform. It is platform independent but not all platform

	Linux
	MacOS
	Windows

are the only platforms where java can run.
	Android		is a kind of linux only. So it will run in android

---------------
Language features of Java:

Java supports 8 primitive data types.
	boolean
	byte
	char
	short
	int
	float
	long
	double
	
how many bits = 1 byte
	8 bits = 1 byte

boolean	1 bit		true or false are the only 2 options		0 or 1	but we cannot give 0 or 1
byte	1 byte		
char	2 bytes
short	2 bytes
int	4 bytes
float	4 bytes
long	8 bytes
double	8 bytes


boolean	true/false
byte	-128 to 127			256 possible values
char	2 bytes		65536 possible characters	each character has an unique number representation
		0 = null
		1 = ☺
		2 = ☻
		3 = ♥
		4 = ♦
		5 = ♣
		48 = 0
		65 = A
		97 = a


	ASCII is 1 byte representation character set
	Unicode is 2 bytes reperesentation character set	(Java uses unicode)

short	2 bytes	-32768 to 32767		65536 possible values
int	4 bytes	-2147483648 to 2147483647
float	4 bytes	1.4E-45 to 3.4028235E38
long	8 bytes 	-9223372036854775808 to 9223372036854775807
double	8 bytes	4.9E-324 to 1.7976931348623157E308

Apart from these 8 data types, there are no data types in Java

User defined data type is not possible in java
User defined types are possible.

Types are created using 
	classes and interfaces

Java does not support Structure	(in c, c++ we can create structures to create user defined data types)

data types are always primitive (value types)
types are reference types


If you create a variable of a data type,
then if you see what is stored in that variable, 
	the value is stored

if you create a variable of type (object)
	then reference is stored in that variable.






















