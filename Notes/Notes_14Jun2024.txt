Day #9:
----------
Spring Boot – starters, Autoconfiguration, actuators, devtools, thymeleaf views, Spring REST – introduction, advantages, Spring REST – implementing REST and HTTP methods, case study demo with all methods.

Spring boot
----------------
Spring boot is introduced above the Spring layer to simplfy, minimize, the complexities of spring applications.
boot means, something is ready to tie up the application. "Bootstrap" the application.

Firstly, we do not create a spring boot application. We generate the spring boot application from "Spring initializr"

	start.spring.io

you can visit this in browser and choose
	maven/gradle
	java version
	spring boot version
	group id
	artifact id
	jar/war
	dependencies

and download the zip of the project.
then unzip and import it to the IDE (eclipse/sts)

This is the concept of starter project. That some initial configurations are performed and give us the working project.
Spring boot has auto configuration and hence minimized the need for basic configuration system.

1) spring boot provides starter project, from spring initializr
2) spring boot provides auto configuration
3) spring boot provides support for 0 xml configuration
4) spring boot encourages "Convention" over "Configuration"
5) spring boot provides internal apache tomcat server (it provides 3 types of internal servers including tomcat)

Find the difference between "Spring" and "Spring boot"


Convention over Configuration
-----------------------------------------
	It means, if you follow the convention (guidelines), then you do not need to configure.
	ex:
		In spring, we use "component scan" to specify the base package that contains beans.
		this helps spring IOC container to scan the beans in that location.

		In spring boot, we can do that. But not necessary. If you store your bean classes inside base package or 		its sub package, then it is not necessary to use "component scan".
		what is a base package in spring boot?	the package that contains Application (that contains main)

Configuration system in spring boot:
	application.properties			text file
	configuration class
		Application class is annotated by @SpringBootApplication	(this is also a configuration)
			@SpringBootApplication is a kind of @SpringBootConfiguration which is kind of
				@Configuration


Demo:
---------
We are going to create our first spring boot application.
1) we use spring initializr
2) STS File -> New -> Spring starter project		(this is not available in eclipse)

----------------
1) go to browser and type in the address bar
	start.spring.io

	Project:		Maven
	Language:		Java
	Spring Boot:	3.3.0
	Group:		com.wipro.demo
	Artifact:		14-jun-1
	Package:		com.wipro.demo
	Packaging:		Jar
	Java:		17
	Dependencies:	Spring Web

click "Generate" button to download the project as zip.

2) go to downloads folder
	unzip
	move the folder to your "workspace"
	go inside the folder
	copy this location (where pom.xml is present)

3) in eclipse/sts (import this project)
	File -> Import -> Existing Maven Projects 
		-> Next
	in Root Directory text box, Paste the url		(you may also use Browse button to locate)
	press tab in keyboard
		ensure that pom.xml is shown as ticked
	Finish
4) go to src/main/java
	com.wipro.demo				this is base package
		Application.java			this is your application file (main method is here)

5) run this Application.java 		as java application	(or spring boot application (this option available is sts))
	Tomcat started on port 8080 (http) with context path '/'
notice that your application runs in 8080 port

If port 8080 is not available? What will  you do?
	i) find process running in port 8080 and kill that
		netstat -aon
	ii) change the port in which our application should run
		i want to run in 8081
	in your project, go to 
		src/main/resources
			application.properties
				type the following:
					server.port=8081
	save the file

Run the Application.java now
	see what happens
		Tomcat started on port 8081

-------------------------------------------
Task:
Follow the steps given in above demo and do it by yourself.

in spring boot, the mvc project is very simple. Yesterday, we created spring mvc, now, i will create a spring boot mvc

1) create a spring boot application using spring initializr
	maven
	war
	package:	com.wipro.demo
	artifact:	14-jun-mvc
	group:	com.wipro.demo
	java:	17
	dependencies:
		spring web
		spring data jpa
		h2

2) import the project and go to 
	application.properties

spring.application.name=14-jun-mvc
server.port=5001
#spring.datasource.url=jdbc:h2:mem:jag
spring.datasource.url=jdbc:h2:file:./data/sampledata
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=password
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect


spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

3) mvc steps:
	src/main/webapp
		here, create folder "WEB-INF/views"
create the jsp files here:
	right click "views" folder and create "index.jsp"


4) again go to application.properties:
	spring.mvc.view.prefix=/WEB-INF/views/
	spring.mvc.view.suffix=.jsp

	remember "/" at the the end of prefix

5) create the controller class
	you can create inside base package or its sub package

	go to src/main/java
		right click package "com.wipro.demo"	-> New -> class

	package:	com.wipro.demo.controller
	class name: MyController

package com.wipro.demo;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class MyController {

	@GetMapping
	public String home()
	{
		return "index";
	}
}


this "index" will be prefixed and suffixed as per application.properties
	/WEB-INF/views/index.jsp

6) go to Application.java
	right click the code "Run As" java application

you see 404 error in browser. Now, check console window:

2024-06-14T10:47:13.178+05:30  WARN 9916 --- [14-jun-mvc] [nio-5000-exec-2] o.s.w.s.r.ResourceHttpRequestHandler     : "Path with "WEB-INF" or "META-INF": [WEB-INF/views/index.jsp]"


Solution:
------------
go to pom.xml and add the following dependency:
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

now, restart the project

check localhost:5001

--------------------------------
Next 
	we will create a mini project with one entity and do all CRUD operations

Mini project 
-----------------
The admin of the online shopping website, wants to
	add product
	update product
	delete product
	view all products
	find product by id
	////there can be other way of searching product by category, price range etc

same project 14-jun-mvc
can be continued now

1) entity class:	Product.java
			id
			name
			category
			price


2) repository interface:	ProductRepository
3) service class:		ProductService

4) controller class:		ProductController

5) jsp file:		product.jsp

--------------------
1) Product.java
package com.wipro.demo.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class Product {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer id;
	private String name;
	private String category;
	private Integer price;
	
	public Product() {}

	public Product(Integer id, String name, String category, Integer price) {
		super();
		this.id = id;
		this.name = name;
		this.category = category;
		this.price = price;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getCategory() {
		return category;
	}

	public void setCategory(String category) {
		this.category = category;
	}

	public Integer getPrice() {
		return price;
	}

	public void setPrice(Integer price) {
		this.price = price;
	}

	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", category=" + category + ", price=" + price + "]";
	}
	
}


2) ProductRepository
package com.wipro.demo.repository;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.wipro.demo.entity.Product;

@Repository
public interface ProductRepository extends JpaRepository<Product, Integer>
{

}

3) ProductService.java
package com.wipro.demo.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.wipro.demo.entity.Product;
import com.wipro.demo.repository.ProductRepository;

@Service
public class ProductService {
	@Autowired
	private ProductRepository pr;
	
	public Product create(Product product) {
		return pr.save(product);
	}
	public List<Product> read() {
		return pr.findAll();
	}
	public Product read(Integer id) {
		Optional<Product> temp = pr.findById(id);
		Product p=null;
		if(temp.isPresent())
		{
			p=temp.get();
		}
		return p;
	}
	public Product update(Product product) {
		Product temp = read(product.getId());
		if(temp!=null)
		{
			temp=product;
			pr.save(temp);
		}
		return temp;
	}
	public Product delete(Integer id) {
		Product temp=read(id);
		if(temp!=null)
		{
			pr.delete(temp);
		}
		return temp;
	}
	
}

4) ProductController

5) product.jsp
I will use JSTL 
	JSP Standard Tag Library

<dependency>
<groupId>javax</groupId>
        <artifactId>javaee-api</artifactId>
        <version>6.0</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>servlet-api</artifactId>
        <version>2.5</version>
        <scope>provided</scope>
    </dependency>
    <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>jstl</artifactId>
        <version>1.2</version>
    </dependency>




----------------
download this 14-jun-mvc project from 
	https://github.com/jagasia/wipro5/blob/jag/Spring/14-jun-mvc.zip
and unzip
keep it for your reference.

Now, follow the steps in notes and do it by yourself.






