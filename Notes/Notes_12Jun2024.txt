Day #7:
----------
Introduction to Hibernate, Implementing Hibernate program and implementing CRUD operations, Spring Framework – history features and getting started, Spring Framework – Dependency injection and Contexts, Spring Framework – Configurations, Scope – singleton and prototype, Spring AOP – Introduction, terminologies and advices, Spring AOP – Exception handling, Spring MVC – architecture, view resolvers, Dispatcher, request and response management.

JSP Syntax and Expression Language (EL), JSP Standard Actions, Model-View-Controller (MVC) Architecture

JSP
	Java Server Pages
	how is JSP different from Servlets?
		Servlets and JSP both are java web components that run in server and the output is sent to browser.
		JSP, at rutime, is translated into servlet and executed. So both are actually same.
		But, when we write more java code and embed the html inside the java code, we use "Servlets"
		when we write more HTML code and inside that, we write java code, then we use "JSP"


Demo:
	create a dynamic web project "12-jun-jsp"
	add a jsp file "index.jsp" 
	write some text inside the <body> tag
	run the jsp file (Run on Server)
	see the output in browser

Implicit objects of JSP:
	out			represents an object of PrintWriter
	response
	request
	session
	application
	page
	exception


JSP basics
	<%	%>		scriplet. It allows us to write java code inside jsp
	<%=	%>		expression. It is used to display something. expressions are only for output
	<%--	%>		comment. the commented portion is ignored.
	<%!	%>		declaration. The variables declared here are useful anywhere in this page
	<%@	%>		directive. There are only 3 directives in JSP. (page, include, taglib)

All of them are used in below example:

<%@page import="java.util.Date"%>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<%!
	int age=20;
	String name="Raja";
%>

<%-- The Date and time now is <%	
		Date dt=new Date();
		out.println(dt);
%> --%>

<%=20*10 %>
<br/>
<%=new Date() %>

</body>
</html>


---------------------
JSP Standard actions
	action tags are prefixed with jsp
	they are differentiated from html tags

	<jsp:useBean>		used to get instance of any bean. Bean is nothing but a reusable java code
	<jsp:out>			prints output
	<jsp:include>		include another jsp page content here
	<jsp:forward>		forward to another jsp from here to there

these are the action tags used in jsp
what is an action tag?
	action tags are custom tags created already in jsp, they are prefixed with "jsp"


Expression Language
----------------------------
	It is shortly called as "EL"
	is used instead of expressions	<%= %>
	${ 20*20	}	=>		400
	${param.message }	=>		request.getParameter("message");

	EL will ignore if the expression returns null
	

Demo:
---------



http://localhost:8080/12-jun-jsp/login?username=krishna&password=moorthy

	whenever we use GET method, the data is visible in the browser's address bar.
	this is a privacy issue, so we need to use POST method.



<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form method="post" action="login">
	Username:<input type="text" name="username" /><br/>
	Password:<input type="password" name="password" /><br/>
	<input type="submit" value="Login" />
</form>
</body>
</html>



	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//among request and response, which is used to get input?
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		PrintWriter out = response.getWriter();
		out.println("You entered "+username+" and "+password);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}


after modification:

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		PrintWriter out = response.getWriter();
		out.println("You entered "+username+" and "+password);
	}


Understand the difference between the HTTP methods
	GET
	POST
	PUT
	DELETE
	PATCH

in mvc and servlets projects, 
	GET
	POST

other methods are used in RESTful webservices

------------------
Now, in the above example, if username is "krishna" and password is "moorthy" then login should be successful.
Otherwise, You need to display "Login failed. Click here to go to login page"

Login successful message should come in green color.

If login is failed, the message "Login Failed" in red color, should be displayed in login page itself.

from servlet to jsp	
	response.sendRedirect("index2.jsp");


Task:
	create a jsp file
	Number 1:_____________________
	Number 2:_____________________
	<<Add>>

When you click add button, 
the form is submitted to the servlet and the servlet get inputs
	request.getParameter
add them
the result should be sent back to the same jsp file
the result should be displayed below the form

-------------------------------------------------------------------------------
MVC		is a design pattern
	Model		=> code that defines data or access data		
	View		=> presentation, any input or output, display, pages, it can be console or web or windows
	Controller		=> allows views to access model from anywhere in the world


Model
	code that defines data
	code that access data

View
	input or output
	presentation
	User Interface
	no matter, it is CUI or GUI, it can be view

Controller
	if controller is not there, then mode and view must be in same machine or virtual machine or JVM
	controller is between view and model and makes it accessible through internet


Demo:

model
	entity class		data definition
	dao class			data access

view
	jsp file to get input or display output

controller
	servlet
		any form submitted in jsp, is posted to the controller
		controller will process the inputs obtained from jsp
		the output will be sent to the jsp




package name
	<<com/org>>.<<companyname/orgname>>.<<groupname>>

	com.wipro.hrms		company
	org.apache.tomcat		organisation



we need to configure this dwp in such a way, all requests received, 
must be received by one servlet called as "DispatcherServlet"
	this configuration can be done in "web.xml"
	web.xml		this is a deployment descriptor file. This is the only configuration file in dwp

	if web.xml is not found inside
		src/main/webapp/WEB-INF folder
	then right click project
		Java EE tools	-> Generate Deployment Descriptor Stub


i have create a "HomeController" servlet with url pattern as "/"
/ means, / anything

http://localhost:8080/12-jun-mvc-1/
http://localhost:8080/12-jun-mvc-1/abcd
http://localhost:8080/12-jun-mvc-1/HomeController

all these urls are received by one servlet called "HomeController"


Refer to this project
	12-jun-mvc-1

we have configured the servlet with url mapping as "/"
so all requests are received by this servlet (DispatcherServlet)
this servlet can obtain the url path
	and based on the path it can redirect to the appopriate jsp file

-------------------------
Introduction to Hibernate, Implementing Hibernate program and implementing CRUD operations, Spring Framework – history features and getting started, Spring Framework – Dependency injection and Contexts, Spring Framework – Configurations, Scope – singleton and prototype, Spring AOP – Introduction, terminologies and advices, Spring AOP – Exception handling, Spring MVC – architecture, view resolvers, Dispatcher, request and response management.
-------------------------------------------------------
Introduction to Hibernate
---------------------------------
How many of you heard about hibernate? If yes, tell me what do you know about hibernate?
	Hibernate is a framework for ORM
ORM	Object Relational Mapping
	what is Relation?
		any row column format data is a relation
		since table is also row column format, a table is a relation
		the result of a query is also a relation

	in database, there is a table (ex: EMPLOYEE)
	in java, there is a class (ex: Employee)

	there are 4 columns in EMPLOYEE table
		ID, NAME, DEPARTMENT, SALARY
	there are 4 properties in Employee class
		id, name, department, salary


	A row in the EMPLOYEE table can be compared to a property in Employee class.

	if there are 20 rows in EMPLOYEE table, then
	List<Employee> can have 20 objects in an array list

ORM concept is implement by Java Persistence API concept.
	JPA concept is used to create a framework called "Hibernate"



Activity:
-----------
Open techademy 
	"Mastering Maven: Java Build Tool"

Finish the maven chapter in techademy before lunch. If completed, then learn JDBC also.
After lunch, we will use maven to create hiberate and spring projects.

--------------------------------------------
Introduction to Hibernate, Implementing Hibernate program and implementing CRUD operations

	Hibernate f/w gives us lot of .jar files (library files) that are needed to be included to our project.
But in maven, these jar files are used as maven dependencies.

1) we will create a maven project.
	in pom.xml		(Project Object Model)
		we will add the hibernate dependencies

2) hibernate.cfg.xml
	this xml file configures the connection details	to connect with a specific database
		url
		username
		password
		driver class name
		dialect			choose mysql dialect

3) entity class
	this class is mapped to a table in the database

4) we can either create xml based hibernate mapping file		entity.hbm.xml
	or
		use annotations instead of xml hbm

5) get session factory using xml (hibernate.cfg.xml)
	from session factory, get session
	open the session
		do the needful		CRUD
		for transactions, commit or rollback
	close the session


		
demo (without maven. by adding jars)
-------------------------------------------------
1) create a java project "hibernate-demo-1"
2) add hibernate jars to this project
	right click project
		properties
			Java Build path
				libraries
					add external jars
			choose the jar files (D:\Jag\wipro\June2024\all\Java\hibernate-demo-1\bin\jars)
	ensure that the jar files are first copied to your project "bin" folder and then reference them in build path
3) Employee.java
	this is the entity class
	









