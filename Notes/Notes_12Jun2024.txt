Day #7:
----------
Introduction to Hibernate, Implementing Hibernate program and implementing CRUD operations, Spring Framework – history features and getting started, Spring Framework – Dependency injection and Contexts, Spring Framework – Configurations, Scope – singleton and prototype, Spring AOP – Introduction, terminologies and advices, Spring AOP – Exception handling, Spring MVC – architecture, view resolvers, Dispatcher, request and response management.

JSP Syntax and Expression Language (EL), JSP Standard Actions, Model-View-Controller (MVC) Architecture

JSP
	Java Server Pages
	how is JSP different from Servlets?
		Servlets and JSP both are java web components that run in server and the output is sent to browser.
		JSP, at rutime, is translated into servlet and executed. So both are actually same.
		But, when we write more java code and embed the html inside the java code, we use "Servlets"
		when we write more HTML code and inside that, we write java code, then we use "JSP"


Demo:
	create a dynamic web project "12-jun-jsp"
	add a jsp file "index.jsp" 
	write some text inside the <body> tag
	run the jsp file (Run on Server)
	see the output in browser

Implicit objects of JSP:
	out			represents an object of PrintWriter
	response
	request
	session
	application
	page
	exception


JSP basics
	<%	%>		scriplet. It allows us to write java code inside jsp
	<%=	%>		expression. It is used to display something. expressions are only for output
	<%--	%>		comment. the commented portion is ignored.
	<%!	%>		declaration. The variables declared here are useful anywhere in this page
	<%@	%>		directive. There are only 3 directives in JSP. (page, include, taglib)

All of them are used in below example:

<%@page import="java.util.Date"%>
<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<%!
	int age=20;
	String name="Raja";
%>

<%-- The Date and time now is <%	
		Date dt=new Date();
		out.println(dt);
%> --%>

<%=20*10 %>
<br/>
<%=new Date() %>

</body>
</html>


---------------------
JSP Standard actions
	action tags are prefixed with jsp
	they are differentiated from html tags

	<jsp:useBean>		used to get instance of any bean. Bean is nothing but a reusable java code
	<jsp:out>			prints output
	<jsp:include>		include another jsp page content here
	<jsp:forward>		forward to another jsp from here to there

these are the action tags used in jsp
what is an action tag?
	action tags are custom tags created already in jsp, they are prefixed with "jsp"


Expression Language
----------------------------
	It is shortly called as "EL"
	is used instead of expressions	<%= %>
	${ 20*20	}	=>		400
	${param.message }	=>		request.getParameter("message");

	EL will ignore if the expression returns null
	

Demo:
---------



http://localhost:8080/12-jun-jsp/login?username=krishna&password=moorthy

	whenever we use GET method, the data is visible in the browser's address bar.
	this is a privacy issue, so we need to use POST method.



<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<title>Insert title here</title>
</head>
<body>
<form method="post" action="login">
	Username:<input type="text" name="username" /><br/>
	Password:<input type="password" name="password" /><br/>
	<input type="submit" value="Login" />
</form>
</body>
</html>



	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		//among request and response, which is used to get input?
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		PrintWriter out = response.getWriter();
		out.println("You entered "+username+" and "+password);
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
		doGet(request, response);
	}


after modification:

	protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)
	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String username=request.getParameter("username");
		String password=request.getParameter("password");
		PrintWriter out = response.getWriter();
		out.println("You entered "+username+" and "+password);
	}


Understand the difference between the HTTP methods
	GET
	POST
	PUT
	DELETE
	PATCH

in mvc and servlets projects, 
	GET
	POST

other methods are used in RESTful webservices

------------------
Now, in the above example, if username is "krishna" and password is "moorthy" then login should be successful.
Otherwise, You need to display "Login failed. Click here to go to login page"

Login successful message should come in green color.

If login is failed, the message "Login Failed" in red color, should be displayed in login page itself.

from servlet to jsp	
	response.sendRedirect("index2.jsp");


Task:
	create a jsp file
	Number 1:_____________________
	Number 2:_____________________
	<<Add>>

When you click add button, 
the form is submitted to the servlet and the servlet get inputs
	request.getParameter
add them
the result should be sent back to the same jsp file
the result should be displayed below the form

-------------------------------------------------------------------------------
MVC		is a design pattern
	Model		=> code that defines data or access data		
	View		=> presentation, any input or output, display, pages, it can be console or web or windows
	Controller		=> allows views to access model from anywhere in the world


Model
	code that defines data
	code that access data

View
	input or output
	presentation
	User Interface
	no matter, it is CUI or GUI, it can be view

Controller
	if controller is not there, then mode and view must be in same machine or virtual machine or JVM
	controller is between view and model and makes it accessible through internet


Demo:

model
	entity class		data definition
	dao class			data access

view
	jsp file to get input or display output

controller
	servlet
		any form submitted in jsp, is posted to the controller
		controller will process the inputs obtained from jsp
		the output will be sent to the jsp




package name
	<<com/org>>.<<companyname/orgname>>.<<groupname>>

	com.wipro.hrms		company
	org.apache.tomcat		organisation



we need to configure this dwp in such a way, all requests received, 
must be received by one servlet called as "DispatcherServlet"
	this configuration can be done in "web.xml"
	web.xml		this is a deployment descriptor file. This is the only configuration file in dwp

	if web.xml is not found inside
		src/main/webapp/WEB-INF folder
	then right click project
		Java EE tools	-> Generate Deployment Descriptor Stub


i have create a "HomeController" servlet with url pattern as "/"
/ means, / anything

http://localhost:8080/12-jun-mvc-1/
http://localhost:8080/12-jun-mvc-1/abcd
http://localhost:8080/12-jun-mvc-1/HomeController

all these urls are received by one servlet called "HomeController"


Refer to this project
	12-jun-mvc-1

we have configured the servlet with url mapping as "/"
so all requests are received by this servlet (DispatcherServlet)
this servlet can obtain the url path
	and based on the path it can redirect to the appopriate jsp file

-------------------------
Introduction to Hibernate, Implementing Hibernate program and implementing CRUD operations, Spring Framework – history features and getting started, Spring Framework – Dependency injection and Contexts, Spring Framework – Configurations, Scope – singleton and prototype, Spring AOP – Introduction, terminologies and advices, Spring AOP – Exception handling, Spring MVC – architecture, view resolvers, Dispatcher, request and response management.
-------------------------------------------------------
Introduction to Hibernate
---------------------------------
How many of you heard about hibernate? If yes, tell me what do you know about hibernate?
	Hibernate is a framework for ORM
ORM	Object Relational Mapping
	what is Relation?
		any row column format data is a relation
		since table is also row column format, a table is a relation
		the result of a query is also a relation

	in database, there is a table (ex: EMPLOYEE)
	in java, there is a class (ex: Employee)

	there are 4 columns in EMPLOYEE table
		ID, NAME, DEPARTMENT, SALARY
	there are 4 properties in Employee class
		id, name, department, salary


	A row in the EMPLOYEE table can be compared to a property in Employee class.

	if there are 20 rows in EMPLOYEE table, then
	List<Employee> can have 20 objects in an array list

ORM concept is implement by Java Persistence API concept.
	JPA concept is used to create a framework called "Hibernate"



Activity:
-----------
Open techademy 
	"Mastering Maven: Java Build Tool"

Finish the maven chapter in techademy before lunch. If completed, then learn JDBC also.
After lunch, we will use maven to create hiberate and spring projects.

--------------------------------------------
Spring Framework – history features and getting started

This concept of ORM/ Persistence, and many other concepts like Scalability, Security, Transaction, etc
were provided by Enterprise Java Beans (EJB)
That ejb was little complicated so they consider EJB as "Winter" season (they consider winter is difficult to live)
To simplify the EJB, they introduced a framework which they consider as a "Spring" season of EJB
	that framework is called as "Spring Framework"	logo of Spring is Grean Leaf (light green in front of dark)


Spring framework provides lot of modules
	Spring Core
	Spring AOP
	Spring MVC
	Spring REST
	Spring Security

Spring Core
	bean management
	what is a bean?
		in java, if you  create a reusable piece of code, it is called as bean
		in other languages like c# or vb.net, they are called as "Components"
		so, a component created in java language is called as "Bean"
		in spring, f/w, "Component", "Bean" both are same only.


	in any project, whatever services are common to any project, they are called as "Generic Services"
	These generic services are provided by "Container" of the f/ws.
	In Spring f/w, there is a container called as "IOC" container, which will take care of generic services.

	What is a container?
		is a special JVM
		it provides runtime env for a bean to execute
		provides runtime services also.
			persistence
			scalability
			security
			transaction management
			life cycle of beans


What is life cycle of bean?
	The bean must be
		created
		passivated
		activated
		destroyed
	by the container to maintain the scalability of the application

Story:
	suppose, if you create an object of a class and call a method "validateLogin" to check if login is success or failure
	for every use who login, an object is required
	for 1M users how many objects required?	1M objects
	These objects are created in the memory of the server. So server will hang. 
	It is important that the server should be able to handle the requests no matter, the no of requests are high or low.
	this ability to handle more or less requests is called as Scalability

	Your object works fine with 1 user at a time
	but in real production, it will be more users.

	Who will handle this?	Spring f/w will  handle this
	How?		it will maintain a pool of instances	around 100 objects 
		if 101st user comes to login?		
			it will find the most idle object and
				claim its space for the 101st user.
				meanwhile, the idle object's state is stored in secondary storage device (passivation)
			if that idle user, becomes active, then
			again another idle user is passivated and that space is claimed
				a new object is created and filled with the state claimed from the secondary storage
					this is (activation)
	Onething now, you understand in spring f/w we are NOT going to create object of bean
		we will get bean from spring f/w
		so since spring takes care of create, passivate, activate, destroy the bean,
		we do not worry about the scalability

	in a project, you create a class which has some useful methods like
			CRUD		addEmployeeToDb	updateEmployeeToDb, tec
	this useful class can be used in any type of project, (web application, webservice, mobile application)
		then this is a BEAN		because, it is a component 
			to be frank, a bean is a class

	What is scalability?
		ability to handle the increase or decrease in demand
		if i need more, i subscribe more. if i need less, i subscibe less
		ability to provision or deprovision based on requirement
		ability to scale to the increasing or decreasing need

	as bean developer, you focus on the logic that you need to write. Generic services are taken care by spring fw

-------------------------------------------
First thing we learn in spring framework	
	is to create a class as a "Bean"
	a class becomes "Bean", if you configure it as a bean
	by configuring a class as a bean, you can "getBean" from spring IOC container, (instead of creating an object by yourself)

------------------------------------------
Maven
	has a central / remote repository
		all the jars are present in that repository


		https://mvnrepository.com/


<!-- https://mvnrepository.com/artifact/org.springframework/spring-context -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context</artifactId>
    <version>6.1.8</version>
</dependency>


<!-- https://mvnrepository.com/artifact/org.springframework/spring-context-support -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-context-support</artifactId>
    <version>6.1.8</version>
</dependency>


these dependencies are added to the pom.xml of our maven project


maven maintains all jars in your local computer in 
	C:\Users\rjaga\.m2\repository

once you use these above dependencies in pom.xml
	maven downloads these relevent jar files to the .m2 
	
for all projects, only 1 copy of jars maintained in your .m2 folder
if you add new dependency in pom.xml, it will be downloaded
if any dependency you add, and the corresponding .jar files are already there in .m2 folder,
maven will  not download them.

only those jar not found in .m2 are downloaded
============================================Spring f/w first demo========================
======================================================================================
--------------------------------------------------
Steps for our 1st spring project (using maven)
1) in eclipse/ sts, 
	File -> New -> Project
			Maven Project	-> Next
2) choose "org.apache.maven.archetypes" 		"maven-archetype-quickstart"	-> Next
3) Group id:	(this can be same for multiple projects. All these projects become a group)
	com.wipro.demo
Artifact id:	(this is the project name)
	12-jun-spring-1
Package:	same as group id
Finish to create the project
-------------------
4) add the spring dependencies to "pom.xml"
	<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>6.1.8</version>
		</dependency>

		<!--
		https://mvnrepository.com/artifact/org.springframework/spring-context-support -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>6.1.8</version>
		</dependency>

5) create a bean:
	com.wipro.demo 
		Employee
package com.wipro.demo;

public class Employee {
	private Integer id;
	private String name;
	private String department;
	private Integer salary;
	
	public Employee() {}

	public Employee(Integer id, String name, String department, Integer salary) {
		super();
		this.id = id;
		this.name = name;
		this.department = department;
		this.salary = salary;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(Integer salary) {
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}
	
}

6) create a spring configuration file
	in src/main/java		(not inside any package) Right click src/main/java and create xml file
		spring.xml

<?xml version = "1.0" encoding = "UTF-8"?>

<beans xmlns = "http://www.springframework.org/schema/beans"
   xmlns:xsi = "http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation = "http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<bean id="emp" class="com.wipro.demo.Employee">
		<property name="id" value="123" />
		<property name="name" value="Shreyansh" />
		<property name="department" value="CSE" />
		<property name="salary" value="989898" />		
	</bean>
</beans>

7) App.java
	in main method
		get Bean of "emp" and display:

package com.wipro.demo;

import org.springframework.context.support.ClassPathXmlApplicationContext;

/**
 * Hello world!
 *
 */
public class App 
{
    public static void main( String[] args )
    {
    	//get object ref or  xml config
    	ClassPathXmlApplicationContext ctx=new ClassPathXmlApplicationContext("spring.xml");
    	Employee employee= (Employee) ctx.getBean("emp");
    	System.out.println(employee);
        System.out.println( "Hello World!" );
    }
}
8) Run as "Java Application"
------------------------------

































































