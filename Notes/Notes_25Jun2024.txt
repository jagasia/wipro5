Day #16
----------
11 participants present at 9:00 am
--------------------------
Introduction to Microservices
Monolith Application
Netflix OSS & Spring Cloud

Understand what is Spring cloud?
Understand microservices architecture.
Load balancer
Circuit breaker
Netflix Eureka server and client
Eureka feign client

Basically, you create multiple projects, each being restful webservices.
they can run simultaneously.
Now, what are the values added by the above technologies?
Load balancer?

Load balancing is the process of distributing traffic among different instances of the same application.

To create a fault-tolerant system, itâ€™s common to run multiple instances of each application. Thus, whenever one service needs to communicate with another, it needs to pick a particular instance to send its request.

There are many algorithms when it comes to load balancing:

Random selection: Choosing an instance randomly
Round-robin: Choosing an instance in the same order each time
Least connections: Choosing the instance with the fewest current connections
Weighted metric: Using a weighted metric to choose the best instance (for example, CPU or memory usage)
IP hash: Using the hash of the client IP to map to an instance

Task:
Understand what is load balancer and create the application using below:
Follow these steps to exihibit load balancer.
	https://www.baeldung.com/spring-cloud-load-balancer

---------------------------------------------------------------------
Attendance taken at 9:12


Restful webservices are stateless.
means, every request is independent. Each request does not know about other request.
	sum(2,3)		=>	5
	differenc		=>	-1	(you remember the values passed to previous request)
	this is stateful ness


	a class has global variables that is "state"
	you call couple of methods of the class, then the state remembers the value across multiple method call.
	this is called as stateful ness.
	But RESTful webservices are stateless.

so, it is possible that you call 2 methods of a single webservice.
and each time a different instance of the service is providing the service.

several instances of a service are available, and among them
the load is balanced.

instance 1 gets a request
instance 2 gets a request
now, instance 1 completed the response
instance 1 gets another request

-------------------------------------------------------------------
1) Spring CLI
2) Eureka


Spring CLI can be installed in a system.
cmd:
	Microsoft Windows [Version 10.0.19045.4529]
(c) Microsoft Corporation. All rights reserved.

C:\Users\rjaga>spring --version
Spring CLI v2.5.0
C:\Users\rjaga>

we can find the version of the spring CLI installed in a computer.

using CLI, we can do many things including:
	build a spring boot application	(generating jar/war/ear)	we can do it using mvn command
	run a spring boot application	we can use mvn to run 	

i can run a spring boot application very easily in cmd prompt.


we are able to run a spring boot application from command prompt.
why?
i)	after deploying the application in cloud
	we may have command prompt only to run the application

ii) 	for CI/CD (continuous integration/ continuous deployment)
	we may need to run the scripts that will run our project
	ex:	jenkins, AWS code pipeline


--------------------------------
Eureka
	we will create multiple rest apis now
	all these are monitored and maintained using eureka server

Demo:
---------
Steps for creating an Eureka server application:
1) create a spring boot project using spring initializr
	Type:	Maven
	Packaging:	Jar
	Java:	17
	Language:	Java
	Group:	com.wipro.demo
	Artifact:	eureka-server
	Package:	com.wipro.demo
	dependencies:
		Spring Web
		Eureka Server

Finish
2) choose a port number for eureka server (8761 is the commonly used port for eureka server)
	application.properties
		server.port=8761
		eureka.client.registerWithEureka = false
		eureka.client.fetchRegistry = false



3) 	below @SpringBootApplication, add the following annotation
		@EnableEurekaServer
Example:
@SpringBootApplication
@EnableEurekaServer
public class EurekaServerApplication {

	public static void main(String[] args) {
		SpringApplication.run(EurekaServerApplication.class, args);
	}

}

4) Run the application
5) go to 
	http://localhost:8761

now, you are able to monitor all the webservices registered to this eureka.
At this time, there are no webservices registered at all. So lets create couple of webservices and register them to this eureka.
-------------------------------------------------
client #1:	customer-service
1) create a spring boot restful webservice
	ensure that you added the "eureka discovery client" dependency

2) in application.properties

spring.application.name=customer-service

server.port=8383
eureka.instance.hostname=localhost
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:8761/eureka/
server.context-path=/customer

3) run the project

4) check eureka server. Now you should be able to see this "customer-service" under:
	Instances currently registered with Eureka
---------------------------------------------------
client #1:	product-service
1) create a spring boot restful webservice
	ensure that you added the "eureka discovery client" dependency

2) in application.properties

spring.application.name=product-service

server.port=8384
eureka.instance.hostname=localhost
eureka.client.serviceUrl.defaultZone=http://${eureka.instance.hostname}:8761/eureka/
server.context-path=/customer

3) run the project

4) check eureka server. Now you should be able to see this "product-service" under:
	Instances currently registered with Eureka
---------------------------------------------------

Task:
follow the steps in the above demo to 
	create eureka server running in 8761
	create customer service running in 8383
	create product service running in 8384

check http://localhost:8761
and monitor the services running
Task:
----------------------------------
Day 16	25-Jun-24	Tue	Monolithic Application
You are supposed to create a Monolithic Application
later this must be translated into micoservices architecture
A monolithic application means, a single project provides all the services
Example:
	One spring boot application is created "e-com-project"
	entities:
		Customer		
		Product
		Sales
	repositories:
		CustomerRepository
		ProductRepository
		SalesRepository
	service classes:
		CustomerService
		ProductService
		SalesService
	controller classes:
		CustomerController
		ProductService
		SalesService
you can test this using postman
or you can use swagger.
--------------------------------------------
Load Balancer
Circuit Breaker

What is circuit breaker?
	Suppose, a webservice A calls B and then B calls C and then C calls D
	The response from D -> C-> B -> A	

	in order to ensure the fault tolerance, network can have retry mechanism if a service is not available.
	C is not available, B is going to retry several times to reach C.

	What happens, if C is available, but has error. 
	Now, the retry mechanism is going to create endless loop of retrying to access C.
	You may think that retry mechanism is not necessary. If retry is not there, then the error is carried foward all the way to B and then A
	
	So, what ideally should happen? when a service has error, we would like to break the loop.
	Circuit breaker
		not only is used to break this loop
		and also can provide an alternate or callback method to proceed in such case.



Spring boot actuator

in eureka server, you find lot of services and you click one of them:
	http://localhost:8383/actuator/info


Lombok
	what is lombok?
		instead of writing boiler plate code in our program, we can use certain annotations which will in tern
			generate the boiler plate code
	what is boiler plate code?
		public class Employee
		{
			private Integer id;
			
			public Employee(){}
			public Employee(Integer id){
			{
				this.id=id;
			}
			public void setId(Integer id)
			{
				this.id=id;
			}
			public Integer getId()
			{
				return id;
			}
		}

	in the above program, 
		no arg constructor
		all arg constructor
		getters
		setters
	are called as boiler plate code. Means, it is almost same in every project


	if we use lombok dependency in our pom.xml
	and if lombok is properly configured,
	then this program can be modified as 


		@AllArgConstructor
		@NoArgConstructor		
		@Data			//getters and setters
		public class Employee
		{
			private Integer id;
		}


these annotations are written in source code.
the compiler will generate the constructors, getters, setters, etc during compilation

Lab setup for Lombok:
	add the lombok dependency in your pom.xml
	and update the project

C:\Users\rjaga\.m2\repository\org\projectlombok\lombok\1.18.10\lombok-1.18.10.jar

group id:		projectlombok
artifact id:		lombok
version:		1.1.18.10

Run this jar file
	1) double click to run		(or)
	2) go to cmd in this location and
		java -jar lombok-1.18.10.jar

in any of the above methods, 
	it will open a window where you locate the IDE (eclipse/sts)
and install

Restart IDE		(eclispse / sts)




Task:
understand circuit breaker using the diagrams in 
	https://www.vinsguru.com/circuit-breaker-pattern/

and create the example project for circuit breaker using
	https://www.baeldung.com/spring-cloud-circuit-breaker




@Service
public class AlbumService {
    
    @Autowired
    private CircuitBreakerFactory circuitBreakerFactory;

    //... 

}





public String getAlbumList() {
    CircuitBreaker circuitBreaker = circuitBreakerFactory.create("circuitbreaker");
    String url = "http://localhost:1234/not-real";
    
    return circuitBreaker.run(() -> restTemplate.getForObject(url, String.class), 
      throwable -> getDefaultAlbumList());
}



Employee emp=new Employee();
emp.setId(10);			//setter to enter id


Employee emp1=new Employee(20);	//constructor to enter id
	there are some employees, join and then submit their certificates later
	day by day one by one they submit
	so first we need to create the employee in system
	then use setter to update one by one


no arg cons + setter is one option
all arg cons is another option


if Employee class has any constructor with argument
then compiler will not create default constructor.
---------------------------
circuit breaker demo:
1) create a spring boot application 
	spring web
	resilience4j

<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
    <version>1.0.2.RELEASE</version>
</dependency>

3) create MyService.java
package com.example.demo.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.client.circuitbreaker.CircuitBreaker;
import org.springframework.cloud.client.circuitbreaker.CircuitBreakerFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

@Service
public class MyService {
	@Autowired
	CircuitBreakerFactory cbf;
	
	
	public String getAlbumList() {
		RestTemplate restTemplate=new RestTemplate();
	    CircuitBreaker circuitBreaker = cbf.create("circuitbreaker");
//	    String url = "http://localhost:1234/not-real";
	    
	    String url="https://jsonplaceholder.typicode.com/albums";
	    
	    return circuitBreaker.run(() -> restTemplate.getForObject(url, String.class), 
	      throwable -> getDefaultAlbumList());
	}

	private String getDefaultAlbumList() {
		// TODO Auto-generated method stub
		return "Album is not available right now";
	}
	
	
}


4) create controller
package com.example.demo.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.service.MyService;

@RestController
public class MyController {
	@Autowired
	private MyService ms;

	@GetMapping
	public String home()
	{
		return ms.getAlbumList();
//		return "hello world";
	}
}

5) application.properties
	server.port=5000

6) run the application 
	in service, change the url
		if the url is correct, you get output
		if the url is wrong, you see that "Album is not available right now"

https://github.com/jagasia/wipro5/tree/jag/microservices/circuit-breaker-demo

Techademy chapters of 
	Microservices

do the learning and ask doubts. Or initiate discussions among peers.


