Day #30
-----------
Life Cycle,Composable Components,Form handling

So far, 
we have learned to 
	create a reactjs application
	create a class component
	create a functional component

in class component, 
	we learned to use props and state
in functional component,
	we are going to learn to use props and state now.

1) create a reactjs app
	npx create-react-app uday
2) cd uday
3) code .
4) npm start

-----------------------------
5) install bootstrap in our app
	npm i bootstrap@5.3.3
in index.js
	import "bootstrap/dist/css/bootstrap.min.css";
-------------
6) create a "components" folder under "src"
7) create a functional component
	lets create a form 
		Number 1:
		Number 2:
			<<add button>>


function Mathematics()
{
    return <div>
        Number 1:<input type="number" id="no1" className="form-control" />
        Number 2:<input type="number" id="no2" className="form-control" /><br/>
        <input type="button" value="Add" className="btn btn-info" />
    </div>
}
export default Mathematics;


8) lets create state in functional component:

syntax for state in class component, is entirely different from functional component


we use hooks
	useState is a hook

import { useState } from "react";

function Mathematics()
{
    const [no1, setNo1]=useState(0);
    const [no2, setNo2]=useState(0);
    const [sum, setSum]=useState(0);

    function fnAdd()
    {
        var total=parseInt(no1)+parseInt(no2);
        setSum(total);        
    }

    function fnUpdate(event)
    {
        var source=event.target.id;
        switch(source)
        {
            case "no1":
                setNo1(event.target.value);
                break;
            case "no2":
                setNo2(event.target.value);
                break;
        }
        console.log("Now the state is:");
        console.log(no1);
        console.log(no2);
    }
    return <div>
        {no1}:{no2}<br/>
        Sum={sum}<br/>
        Number 1:<input type="number" id="no1" className="form-control" onChange={fnUpdate} />
        Number 2:<input type="number" id="no2" className="form-control" onChange={fnUpdate} /><br/>
        <input type="button" value="Add" className="btn btn-info" onClick={fnAdd} />
    </div>
}
export default Mathematics;

--------------------------------
Task:

Create a login component (functional component)
create states:
	username
	password
	status

bind the state to the change event of the textboxes
on login button click,
declare the status
	Login failed	(if username and password are same)
	Login success	(if different)



we can create arrow functional component:

const Login=()=><div>
    Login here
</div>

export default Login;


--------------------
but if we want to add some functions and hooks in this,
it is not possible to do, unless we modify this

const Login=()=>
{
    return <div>
    Login here
</div>
}
export default Login;


----------------------
notice the difference. 
{ with return

------------------


we are able to write functions:

const Login=()=>
{
    function fn1()
    {
        alert("hello")
    }
    return <div>
    Login here
</div>
}
export default Login;





---------------
const Login=()=>
{
    //write your functions here
    return <div>
    Login here
</div>
}
export default Login;


-------------------complete code is-----------------
import { useState } from "react";

const Login=()=>
{
    //write your functions here
    const [username, setUsername]=useState();
    const [password, setPassword]=useState();
    const [status, setStatus]=useState();

    function fnUpdate(event)
    {
        var source=event.target.id;
        switch(source)
        {
            case "username":
                setUsername(event.target.value);
                break;
            case "password":
                setPassword(event.target.value);
                break;
        }
    }

    function fnLogin()
    {
        var uname=username;
        var pwd=password;
        if(uname==pwd)
        {
            setStatus("Login Failed")
        }else{
            setStatus("Login success")
        }
        
    }
    let x='';
    if(status=="Login success")
        x="alert alert-success";
    else if(status=="Login Failed")
        x="alert alert-danger";
    else
        x="invisible";
    return (
        
    <div>
    Username:<input type="text" id="username" className="form-control" onChange={fnUpdate} />
    Password:<input type="password" id="password" className="form-control" onChange={fnUpdate} />
    <br/>
    <input type="button" value="Login" className="btn btn-info" onClick={fnLogin} />
    <br/><br/>
    <div className={x}>{status}</div>
    
</div>)
}
export default Login;

-----------------------
i am going to modify this

instead of writing a separate function for fnUpdate
the textbox change event can have arrow function

using arrow function:
-------------------------------
import { useState } from "react";

const Login=()=>
{
    //write your functions here
    const [username, setUsername]=useState();
    const [password, setPassword]=useState();
    const [status, setStatus]=useState();

    // function fnUpdate(event)
    // {
    //     var source=event.target.id;
    //     switch(source)
    //     {
    //         case "username":
    //             setUsername(event.target.value);
    //             break;
    //         case "password":
    //             setPassword(event.target.value);
    //             break;
    //     }
    // }

    function fnLogin()
    {
        var uname=username;
        var pwd=password;
        if(uname==pwd)
        {
            setStatus("Login Failed")
        }else{
            setStatus("Login success")
        }
        
    }
    let x='';
    if(status=="Login success")
        x="alert alert-success";
    else if(status=="Login Failed")
        x="alert alert-danger";
    else
        x="invisible";
    return (
        
    <div>
        {username}:{password}<br/>
    Username:<input type="text" id="username" className="form-control" onChange={(event)=>{ setUsername(event.target.value) }} />
    Password:<input type="password" id="password" className="form-control" onChange={(event)=>{ setPassword(event.target.value) }} />
    <br/>
    <input type="button" value="Login" className="btn btn-info" onClick={fnLogin} />
    <br/><br/>
    <div className={x}>{status}</div>
    
</div>)
}
export default Login;


Task:
create an arrow function component for the same
if you have done login component, now do maths component (using arrow)
or vice versa

share the screenshot in chat

24 including me at 11:49
-----------------------------------

Life cycle of component.


the component is loading, loaded and refresh during the course of rendering.

so, we need to understand some life cycle hooks
so that we will get the data up to date in our browser.

in funcational component
	we use hooks
		useEffect()
		useState()
		useContext()
	

in class component
	we use event handler methods
		constructor()
		componentDidMount()
		getDerivedStateFromProps()
		componentWillUnmount()
		



for class component, life cycle method:
	https://www.freecodecamp.org/news/react-component-lifecycle-methods/

for functional component, life cycle hooks:
	https://www.freecodecamp.org/news/react-lifecycle-methods-and-hooks-for-beginners/
this contains both class and functional component lifecycle methods and hooks


Component Life Cycle methods.
Multiple components interacting each other, Reading the data from in-memory, React application interfacing with backend server for data (json-server).


Do anybody know what is json server?

we can run a json server in our system and create a simple rest api that accept/return json


Note:
First, you need to check json-server installed globally or not. or you can install it globally by

npm install -g json-server
If you install it locally in your project, use npx to run it

npx json-server --watch db.json





Steps to run a json server.
1) create a file with extension .json
	db.json
inside this file, create a basic json


2) inside this file, create a json string.
{
	"products":[
		{"id":"1","name":"Pen","price":10}
	]
}

3) install json server
	npm install json-server

4) run this db.json using json server:
	json-server db.json
(or)
npx json-server --watch db.json

now check
localhost:300


to see all products

http://localhost:3000/products

use postman to 
add, update, delete, select




Now, that we got a rest api
	http://localhost:3000/products

shall we create front end for this in reactjs?

how react can access rest api?
--------------------------------------
1) install axios to our project
2) use axios to call rest api using
	get
	post
	put
	delete

since json server and react js both runs in same port number
it is not possible to run both simultaneously.

so lets run json server in different port number.
how?
	npx json-server --watch -p 4000 db.json

http://localhost:4000/products

-------------------
steps to access rest api from reactjs.

1) in reactjs project location
	npm i axios

2) lets create all the code that access rest api inside a service class
	i) inside "src" folder, lets create "services" folder
	ii) inside "services" folder, lets create "ProductService.js"


3) in ProductService.js
import axios from "axios";
class ProductService {
    URL = 'http://localhost:4000/products'

    fnGetAllProducts() {
        return axios.get(this.URL);
    }


    fnAddProduct(product) {
        return axios.post(this.URL, product);
    }

    fnUpdateProduct(product)
    {
        return axios.put(this.URL+"/"+product.id,product);
    }

    fnDeleteProduct(id)
    {
        return axios.delete(this.URL+"/"+id);
    }
}


//this is not a component. Note "new" and ()
export default new ProductService();

4) lets create ProductGrid.js
to display all products in tabular format

5) we need to call the ProductService method to get all products as array
and store it in a state

----------------------------------------------------------------------------------------------------

We need to create another component
that will show a form to get input for
	adding product to the rest api

import { useState } from "react";
import ProductService from "../services/ProductService";

const ProductForm=()=>{
    const [id, setId]=useState();
    const [name, setName]=useState();
    const [price, setPrice]=useState();

    function fnAdd()
    {
        //call the method of ProductService now
        var product={"id":"","name":"","price":""};
        product.id=id;
        product.name=name;
        product.price=price;
        // console.log("........................")
        // console.log(product);
        // alert(JSON.stringify(product))
        ProductService.fnAddProduct(product)
        .then((response)=>{
            console.log(response.data)
            window.location.reload(false)
        })
        .catch((error)=>{
            console.log(error)
        })
    }

    return <div>
        {id}:{name}:{price}<br/>
        Id:<input type="number" id="id" className="form-control" onChange={(event)=>{setId(event.target.value)}} />
        Name:<input type="text" id="name" className="form-control" onChange={(event)=>{setName(event.target.value)}} />
        Price:<input type="number" id="price" className="form-control" onChange={(event)=>{setPrice(event.target.value)}} />
        <br/>
        <input type="button" value="Add" className="btn btn-success" onClick={fnAdd} />
    </div>
}
export default ProductForm;

I have done adding a product.
now, you do the same
and also do
	update
	delete
