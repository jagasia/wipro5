Day #30
-----------
Life Cycle,Composable Components,Form handling

So far, 
we have learned to 
	create a reactjs application
	create a class component
	create a functional component

in class component, 
	we learned to use props and state
in functional component,
	we are going to learn to use props and state now.

1) create a reactjs app
	npx create-react-app uday
2) cd uday
3) code .
4) npm start

-----------------------------
5) install bootstrap in our app
	npm i bootstrap@5.3.3
in index.js
	import "bootstrap/dist/css/bootstrap.min.css";
-------------
6) create a "components" folder under "src"
7) create a functional component
	lets create a form 
		Number 1:
		Number 2:
			<<add button>>


function Mathematics()
{
    return <div>
        Number 1:<input type="number" id="no1" className="form-control" />
        Number 2:<input type="number" id="no2" className="form-control" /><br/>
        <input type="button" value="Add" className="btn btn-info" />
    </div>
}
export default Mathematics;


8) lets create state in functional component:

syntax for state in class component, is entirely different from functional component


we use hooks
	useState is a hook

import { useState } from "react";

function Mathematics()
{
    const [no1, setNo1]=useState(0);
    const [no2, setNo2]=useState(0);
    const [sum, setSum]=useState(0);

    function fnAdd()
    {
        var total=parseInt(no1)+parseInt(no2);
        setSum(total);        
    }

    function fnUpdate(event)
    {
        var source=event.target.id;
        switch(source)
        {
            case "no1":
                setNo1(event.target.value);
                break;
            case "no2":
                setNo2(event.target.value);
                break;
        }
        console.log("Now the state is:");
        console.log(no1);
        console.log(no2);
    }
    return <div>
        {no1}:{no2}<br/>
        Sum={sum}<br/>
        Number 1:<input type="number" id="no1" className="form-control" onChange={fnUpdate} />
        Number 2:<input type="number" id="no2" className="form-control" onChange={fnUpdate} /><br/>
        <input type="button" value="Add" className="btn btn-info" onClick={fnAdd} />
    </div>
}
export default Mathematics;

--------------------------------
Task:

Create a login component (functional component)
create states:
	username
	password
	status

bind the state to the change event of the textboxes
on login button click,
declare the status
	Login failed	(if username and password are same)
	Login success	(if different)



we can create arrow functional component:

const Login=()=><div>
    Login here
</div>

export default Login;


--------------------
but if we want to add some functions and hooks in this,
it is not possible to do, unless we modify this

const Login=()=>
{
    return <div>
    Login here
</div>
}
export default Login;


----------------------
notice the difference. 
{ with return

------------------


we are able to write functions:

const Login=()=>
{
    function fn1()
    {
        alert("hello")
    }
    return <div>
    Login here
</div>
}
export default Login;





---------------
const Login=()=>
{
    //write your functions here
    return <div>
    Login here
</div>
}
export default Login;


-------------------complete code is-----------------
import { useState } from "react";

const Login=()=>
{
    //write your functions here
    const [username, setUsername]=useState();
    const [password, setPassword]=useState();
    const [status, setStatus]=useState();

    function fnUpdate(event)
    {
        var source=event.target.id;
        switch(source)
        {
            case "username":
                setUsername(event.target.value);
                break;
            case "password":
                setPassword(event.target.value);
                break;
        }
    }

    function fnLogin()
    {
        var uname=username;
        var pwd=password;
        if(uname==pwd)
        {
            setStatus("Login Failed")
        }else{
            setStatus("Login success")
        }
        
    }
    let x='';
    if(status=="Login success")
        x="alert alert-success";
    else if(status=="Login Failed")
        x="alert alert-danger";
    else
        x="invisible";
    return (
        
    <div>
    Username:<input type="text" id="username" className="form-control" onChange={fnUpdate} />
    Password:<input type="password" id="password" className="form-control" onChange={fnUpdate} />
    <br/>
    <input type="button" value="Login" className="btn btn-info" onClick={fnLogin} />
    <br/><br/>
    <div className={x}>{status}</div>
    
</div>)
}
export default Login;

-----------------------
i am going to modify this

instead of writing a separate function for fnUpdate
the textbox change event can have arrow function

using arrow function:
-------------------------------
import { useState } from "react";

const Login=()=>
{
    //write your functions here
    const [username, setUsername]=useState();
    const [password, setPassword]=useState();
    const [status, setStatus]=useState();

    // function fnUpdate(event)
    // {
    //     var source=event.target.id;
    //     switch(source)
    //     {
    //         case "username":
    //             setUsername(event.target.value);
    //             break;
    //         case "password":
    //             setPassword(event.target.value);
    //             break;
    //     }
    // }

    function fnLogin()
    {
        var uname=username;
        var pwd=password;
        if(uname==pwd)
        {
            setStatus("Login Failed")
        }else{
            setStatus("Login success")
        }
        
    }
    let x='';
    if(status=="Login success")
        x="alert alert-success";
    else if(status=="Login Failed")
        x="alert alert-danger";
    else
        x="invisible";
    return (
        
    <div>
        {username}:{password}<br/>
    Username:<input type="text" id="username" className="form-control" onChange={(event)=>{ setUsername(event.target.value) }} />
    Password:<input type="password" id="password" className="form-control" onChange={(event)=>{ setPassword(event.target.value) }} />
    <br/>
    <input type="button" value="Login" className="btn btn-info" onClick={fnLogin} />
    <br/><br/>
    <div className={x}>{status}</div>
    
</div>)
}
export default Login;


