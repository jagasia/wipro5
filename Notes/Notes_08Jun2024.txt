pending: multi-threading, file I/O
Day #4
------------
in Day number 3, we have the following pendings to be discussed.

Exception Handling, Try-Catch Blocks, types of exceptions, Throwing Exceptions & catching Multiple Exceptions, Finally block,custom exceptions, Concurrency, File I/O

----------------------------------
Exception Handling
---------------------------
	What is exception?
		is any abnormal event that occurs during the execution of the program.
		in such case, if the exception is not handled, the program will terminate abruptly.

	Why exception?
		exceptions are means of communication between the person who write a method, and the person who call the method.	Need not be person. It can be between, the called method to calling method.

		
Anil Lokku is creating a method
	class Bank	
	{
		public void withdraw(int amount)
		{
			//the amount can be less than or equal to 40k
			//Anil knows that amount >40000 is invalid. But in such case, what to do?
			//Anil do not want to decide what to do in that case. The decision has to be made by Sai.
			if(amount>40000)
			{
				throw new NumberFormatException("Amount cannot be >40k");
			}else
			{
				System.out.println("Remember to collect the cash");
			}

		}
	}


Sai Krishna is calling this method

	public class App
	{
		public static void main(String args[])
		{
			Bank sbi=new Bank();
			sbi.withdraw(50000);		//Sai is allowed to handle the exception here
		}
	}

Exceptions	
	we discuss only Runtime exceptions
	we do not discuss about syntax errors
	we do not discuss about logical errors

class hierarchy of Exceptions is:	the following are classes

Object
	Throwable
		Exception
		Error



Error 
	is something which always terminate the program. 
	Error cannot be handled

Exception 
	can be handled

Exception is the super class for all exception classes
	
Sub classes of Exception class
	ArithmeticException
	NullPointerException
	NumberFormatException
	IOException
	InterruptedException
	ConcurrentModificationException
	ArrayIndexOutOfBoundsException
	FileNotFoundException
	ParseException
	
	RuntimeException
		this class is very important
		the classes derived from RuntimeException are called as "unchecked" exceptions. 
		They are not checked by the compiler


	I recommend you to have only 1 line inside the try block

	Exception
		all classes derived from Exception are checked exceptions
		they are checked by the compiler
		if you throw an object of checked exception, then we need to 
			use "throws" clause to declare that this method throws these checked exceptions, but
			does not handle them.	The calling method is expected to handle them.
			the above is the definition of "throws" clause.

public void withdraw(int  amount) throws IOException, InterruptedException

Interview question:
--------------------------
	What is the difference between "throw" and "throws"
		throw is used to throw an object of an exception class
		throws is used to declare the checked exceptions that are thrown inside the method, but they 		 			are not handled in this method. They are expected to be handled by the calling 					method

	What is the difference between checked and unchecked exceptions?
		checked exceptions are classes derived from Exception class and are checked by the compiler
			in such case, we either handle them in the method, or declare with throws clause.
		unchecked exceptions are classes derived from RuntimeException class, so they are check at runtime
			compiler does not check them.	They can be handled or not handled or not declared as 				thrown
		

we can also create our own exception classes.
	user defined checked exception class
		is created by inheriting "Exception" class

	user defined unchecked exception class
		is created by inheriting "RuntimeException" class

you may also inherit any class that are derived from the above classes.

catch(Exception ex)			//this can handle any exception, because it is the super class for exception classes
	ex.getMessage()		//the sub class must have passed the message to the super class	super(message)





public class InvalidAmountException extends RuntimeException
{
	public InvalidAmountException() {}

	public InvalidAmountException(String message) {
		super(message);
	}
	
}



		try
		{
			sbi.withdraw(50000);
		}catch(Exception ex)		//if there are lot of catch block, then this catch must be at the end
		{
			System.out.println(ex.getMessage());
		}


because, Exception catch can handle all exception, so
the following catch blocks become unreachable code

Activity:
-----------
try block
catch block
finally block
throw
throws
			
-----------------------------------------------------
Introduction to Collections Framework, List, Set,Map, Queue Interface, Deque Interface, Stack Class, Iterator Interface, Sorting and Searching Collections, Comparators and Comparables, Generics and Type Safety, Concurrent Collections, Synchronization and Thread Safety

Collections
--------------
Limitations of array
	array is fixed length
	length must be known while creating array
	array elements are always contiguous in memory. So we need continuous memory locations to create array


	what is collection in java?
		Since the arrays are fixed length, and we need to know the length of the array in prior while creating the 		array itself, we need some other datastructure, that can grow or shrink during the execution of program

	
	suppose, you create the following program:

public int[] findPrimeNumbers(int from, int to)
{
	//write your code here...	
	//problem here is, that you need to store the prime numbers in an array
	//what is the size of the array?
	int []arr=new int[10];		//now, we cant say there are only 10 prime numbers between from and to
	int []arr=new int[Integer.MAX_VALUE];	//now, if the no of prime numbers is less than length of array, we have 						unnecessarily, created a large array
}

	So, it is bad idea to  store all prime numbers between from and to in an array
	we need a datastructure which does not need to know the size of the ds


Collection classes are derived from 2 category of interfaces

List
	the classes derived from List interface
		ArrayList
		LinkedList
		Vector		legacy class	available from very early versions of java  (synchronized)
		Stack
		
Set
		HashSet
		TreeSet
		LinkedHashSet

Map		//is not collection but application of collection
		HashMap
		TreeMap
		LinkedHashMap


Vector is synchronized		when multiple threads access a vector object, they are allowed one by one
Hashtable is synchronized		when multiple threads access a vector object, they are allowed one by one

Difference between List and Set
-------------------------------------------
List allows duplicate elements. Set rejects duplicate elements.
List is ordered, it remembers the order in which elements are added. Set order depends on the type of the Set.
List allows sorting the elements after being added. Set does not allow changing the order of elements
List supports iterating forward and backward. Set supports forward iteration only.


ArrayList
-------------
	is similar to array, but we do not need to know the size of array list when we create.

import java.util.ArrayList;
import java.util.List;

public class App1 {

	public static void main(String[] args) {
		List<Integer> marks=new ArrayList<>();
		marks.add(80);
		marks.add(90);
		marks.add(60);
		
		//how to iterate all elements of a list?
		for(Integer x:marks)
		{
			System.out.println(x);
		}
	}

}

we can use for-each loop to iterate all elements of a list
but it is always good to use "iterator"

the following code uses "for-each" loop and inside the loop it is removing an element that affects the boundary condition of the loop. so we get error.

import java.util.ArrayList;
import java.util.List;

public class App1 {

	public static void main(String[] args) {
		List<Integer> marks=new ArrayList<>();
		marks.add(80);
		marks.add(90);
		marks.add(60);
		
		//how to iterate all elements of a list?
		for(Integer x:marks)
		{
			if(x.equals(80))
				marks.remove(new Integer(80));
			System.out.println(x);
		}
	}

}


80
Exception in thread "main" java.util.ConcurrentModificationException
	at java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)
	at java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)
	at App1.main(App1.java:13)

now, we use iterator to do the same. we dont face any problem.

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class App2_Modified {

	public static void main(String[] args) {
		List<Integer> marks=new ArrayList<>();
		marks.add(80);
		marks.add(90);
		marks.add(60);
		
		//how to iterate all elements of a list?
		Iterator<Integer> it = marks.iterator();
		while(it.hasNext())
		{
			Integer x = it.next();
			if(x==80)
				it.remove();
			else
				System.out.println(x);
		}
	}

}



So, it is recommended to use iterator to visit all elements of a collection.


marks.remove(new Integer(80));
	because, remove method has 2 overloaded versions
		remove(int)	//remove element at index 
		remove(Object)	//remove this element

	remove(80);		it assume that 80 is index because it is int type
	remove(new Integer(80));	it means, 80 is an Integer and not int


Iterator
	has only 3 methods
		hasNext()
		next()
		remove()


hasNext()	returns true if there is any more element to iterator
next() returns next element
remove() removes the current element


List supports ListIterator to iterator forward or backward. 		Set never support ListIterator

ListIterator
	hasNext()
	hasPrevious()
	next()
	previous()
	remove()

import java.util.Arrays;
import java.util.List;
import java.util.ListIterator;

public class App3_ListIterator {

	public static void main(String[] args) {
		List<Integer> marks=Arrays.asList(1,2,3,4,5,6,7);
		
		ListIterator<Integer> it = marks.listIterator(marks.size());
//		while(it.hasNext())
//		{
//			Integer x = it.next();
//			System.out.println(x);
//		}
		
		System.out.println("---------------------");
		while(it.hasPrevious())
		{
			Integer x = it.previous();
			System.out.println(x);
		}
	}

}


Task:
--------
Write a program to get infinite number of number inputs
from the user. Stop getting input if the input is negative number.
Once stopped getting input, print all the inputs obtained in the same order as output.

	you do not know how many inputs user is going to enter. All of them are stored in a list

	
ArrayList
LinkedList
	both have index

	how to get a particular element in the list based on index

	get(index)
	add()
	remove(int)		by index
	remove(Object)


List of Objects
	List<Employee>
	List<College>
	List<Contact>


I have  done Mock 11 Req -2 and the solution is pushed to the git.
Try the same in Mock 29 - Req -2


	Collections.sort(list);			//is used to sort a list

	how it will be sorted if it is a List<Employee>?		based on Comparable

	Suppose if we want to ask the user and decide how to sort?
		we need Comparator

------------------------------------
Set
	

LinkedHashSet is ordered. It remembers the order in which elements added.


import java.util.HashSet;
import java.util.Set;

public class App {

	public static void main(String[] args) {
		Set<Integer> set=new HashSet<>();
		set.add(100);
		set.add(90);
		set.add(80);
		set.add(90);	//rejected
		set.add(80);	//rejected
		set.add(100);	//rejected
		set.add(80);	//rejected
		set.add(90);	//rejected
		
		System.out.println(set); //what is output
		//order is not same as we added
		//order of HashSet is based on
		//hashCode method of Integer (here)
	}

}


-----------------------------
import java.util.Objects;

public class Employee {
	private Integer id;
	private String name;
	private String department;
	private Integer salary;
	
	public Employee() {}

	public Employee(Integer id, String name, String department, Integer salary) {
		super();
		this.id = id;
		this.name = name;
		this.department = department;
		this.salary = salary;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(Integer salary) {
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}

	@Override
	public int hashCode() {
		return id.hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		Employee arg=(Employee) obj;
		return this.getId().equals(arg.getId());
	}
	
	
	
}



import java.util.HashSet;
import java.util.Set;

public class App2 {

	public static void main(String[] args) {
		Set<Employee> set=new HashSet<>();
		set.add(new Employee(1,"Rakesh","Mech",1000000));
		set.add(new Employee(2,"Arun","CSE",1000000));
		set.add(new Employee(2,"Dheeraj","CSE",1000000));
		set.add(new Employee(4,"Eswar","ECE",1000000));
		set.add(new Employee(5,"Shreyansh","EEE",1000000));
		
//		System.out.println(set.size()); //output
		//Set identifies duplicates with the help of
		//equals() and hashCode()
		//two employees are same if their ids are same
		
		for(Employee e:set)
		{
			System.out.println(e);
		}
	}

}




HashSet 
	requires equals() and hashCode() methods to identify duplicates and the order of elements
	while adding elements, they are not always added at the end. They are added in the  position decided by the
	hashCode method

TreeSet
	requires Comparable or Comparator to sort the elements in a TreeSet

	TreeSet maintains elements in sorted manner.
	while adding elements, the elements need not be added at the end of the set. They are added in a position
	decided by the Comparable or Comparator
	
	
public class Employee implements Comparable<Employee>
{
	private Integer id;
	private String name;
	private String department;
	private Integer salary;
	
	public Employee() {}

	public Employee(Integer id, String name, String department, Integer salary) {
		super();
		this.id = id;
		this.name = name;
		this.department = department;
		this.salary = salary;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getDepartment() {
		return department;
	}

	public void setDepartment(String department) {
		this.department = department;
	}

	public Integer getSalary() {
		return salary;
	}

	public void setSalary(Integer salary) {
		this.salary = salary;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + ", department=" + department + ", salary=" + salary + "]";
	}

	@Override
	public int hashCode() {
		return id.hashCode();
	}

	@Override
	public boolean equals(Object obj) {
		Employee arg=(Employee) obj;
		return this.getId().equals(arg.getId());
	}

	@Override
	public int compareTo(Employee o) {
		return this.getId().compareTo(o.getId());
		//0 if both are same
		//1 if first is bigger
		//-1 if first is smaller
		//	a-b	
	}
	
	
	
}

import java.util.Set;
import java.util.TreeSet;

public class App4 {

	public static void main(String[] args) {
		Set<Employee> set=new TreeSet<>();
		//we cannot an element to TreeSet until that
		//element type implements Comparable
		//if you  want to sort something, 
		//first it should be comparable
		set.add(new Employee(11,"Rakesh","Mech",1000000));
		set.add(new Employee(2,"Arun","CSE",1000000));
		set.add(new Employee(2,"Dheeraj","CSE",1000000));
		set.add(new Employee(6,"Eswar","ECE",1000000));
		set.add(new Employee(5,"Shreyansh","EEE",1000000));
		
		for(Employee e:set)
		{
			System.out.println(e);
		}
	}

}

---------------------------------------
Understand how 
	HashSet<Employee>
	TreeSet<Employee>
	LinkedHashSet	always maintains the order	(this is similar to List)


	Set does not support sorting elements (after they are added).




System.out.format("%s","India");		prints output
System.out.printf("%s","India");			prints output and same as format method
String.format("%s","India");			returns formatted string


I have done Mock11-Req-5
--------------------------------------

You will do Mock29-Req-5
	exactly same 
		Comparable and couple of Comparator














